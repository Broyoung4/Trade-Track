'use client'
import React, { useState, useEffect } from 'react';
import { MdAdd } from "react-icons/md";
import { IoMdClose } from "react-icons/io";
import { prisma } from '../db';
import InventoryComp from '../components/InventoryComp';

async function getInventory() {
    
    return 
await prisma.inventory.findMany()
    
}

const page = async() => {
    // const inventory = await getInventory();
    /* const [inventory, setInventory] = useState([
        { item: 'Small Roller', price: 600, quantity: 1 },
        { item: 'Trowel', price: 1500, quantity: 2 },
        { item: 'Scrapper', price: 1000, quantity: 5 },
    ]); */
    const [inventory, setInventory] = useState([]);
    const [newItem, setNewItem] = useState({ item: '', price: 0, quantity: 0 });
    const [modal, setModal] = useState(false);

    useEffect(() => {
        async function fetchInventory() {
            const data = await getInventory();
            setInventory(data);
        }
        fetchInventory();
    }, []);


    const addItem = () => {
        // Check if the item already exists in the inventory
        const existingItem = inventory.find(item => item.item === newItem.item);
    
        if (existingItem) {
          // Update existing item's quantity and price
          const updatedInventory = inventory.map(item => {
            if (item.item === newItem.item) {
              return {
                ...item,
                quantity: item.quantity + newItem.quantity,
                price: item.price + newItem.price,
              };
            }
            return item;
          });
          setInventory(updatedInventory);
        } else {
          // Add new item to the inventory
          setInventory([...inventory, newItem]);
        }
    
        // Clear the form after adding the item
        setNewItem({ item: '', price: 0, quantity: 0 });
      };

return (
    <section className="container min-h-screen p-8 pb-20 font-[family-name:var(--font-geist-sans)]">
            <h1>Inventory</h1>
            <div className="flex justify-end items-center mt-4 ">
                    <MdAdd size={25} className='border border-slate-500 hover:bg-red-950' onClick={()=>setModal(true)}/>
            </div>
            {inventory.length === 0 ? <p className="text-center mt-4">No items in inventory</p> : (
                     <div>
                     {/* Inventory Table */}
                     <table className="w-full mt-4">
                             <thead>
                                     <tr>
                                             <th className="text-left">Item</th>
                                             <th className="text-left">Price</th>
                                             <th className="text-left">Quantity</th>
                                     </tr>
                             </thead>
                             <tbody>
                                     {inventory.map((item, index) => (
                                         <InventoryComp key={index} item={item} />    
                                     ))}
                             </tbody>
                     </table>
             </div>
            )}
         {modal && (
            <div className="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center">
                <div className="bg-white p-8 rounded-lg">
                            <IoMdClose
                                    size={25}
                                    className="absolute top-4 right-4 text-slate-500 cursor-pointer"
                                    onClick={() => setModal(false)}
                            />
                    <h2>Add Item</h2>
                    {/*<form onSubmit={(e) => {
                            e.preventDefault();
                            addItem();
                            setModal(false);
                    }}>
                        <div className="flex flex-col gap-4 mt-4">
                            <input
                                type="text"
                                placeholder="Item"
                                className="border border-slate-500 rounded-lg p-2"
                                value={newItem.item}
                                onChange={(e) => setNewItem({ ...newItem, item: e.target.value })}
                            />
                            <input
                                type="number"
                                placeholder="Price"
                                className="border border-slate-500 rounded-lg p-2"
                                value={newItem.price.toString()}
                                onChange={(e) => setNewItem({ ...newItem, price: parseFloat(e.target.value) || 0 })}
                            />
                            <input
                                type="number"
                                placeholder="Quantity"
                                className="border border-slate-500 rounded-lg p-2"
                                value={newItem.quantity.toString()}
                                onChange={(e) => setNewItem({ ...newItem, quantity: parseInt(e.target.value) || 0 })}
                            />
                            <button
                                type="submit"
                                className="bg-red-950 text-white p-2 rounded-lg"
                                onClick={(e) => {
                                    if (!newItem.item || !newItem.price || !newItem.quantity) {
                                        e.preventDefault();
                                        alert('All fields are required');
                                    }
                                }}
                            >
                                Add
                            </button>
                        </div>
                    </form>*/}
                </div>
            </div>
         )}
    </section>
)
}

export default page


//sales former


"use client";
import React, { useState, useEffect } from "react";
import { useRouter } from 'next/navigation';


const Page = () => {
  const [salesToday, setSalesToday] = useState([]);
  const [showSalesPage, setShowSalesPage] = useState(false);


  const router = useRouter();

  // Function to handle user prompt response
  const handlePromptResponse = (response) => {
    if (response.toLowerCase() === "no") {
      setShowSalesPage(true); // Show sales page if user confirms
    } else {
      // Handle case where user doesn't want to input a sale
      alert("User declined to input a sale.");
      router.push('/salesentry');
    }
  };

  // Function to handle adding a new sale
  const handleAddSale = (newSale) => {
    // Check if a sale with the same product already exists today
    const existingSaleIndex = salesToday.findIndex(
      (sale) => sale.product === newSale.product
    );

    if (existingSaleIndex !== -1) {
      // Update existing sale
      const updatedSales = [...salesToday];
      updatedSales[existingSaleIndex] = {
        ...updatedSales[existingSaleIndex],
        quantity: updatedSales[existingSaleIndex].quantity + newSale.quantity,
        total: updatedSales[existingSaleIndex].quantity * newSale.price,
      };
      setSalesToday(updatedSales);
    } else {
      // Add new sale
      setSalesToday([
        ...salesToday,
        { ...newSale, total: newSale.quantity * newSale.price },
      ]);
    }
  };

  // Example: Fetch sales data from API or database (replace with your actual implementation)
  useEffect(() => {
    // Simulate fetching data from an API or database
    const mockSalesData = [
      { product: "Product A", quantity: 2, price: 10 },
      { product: "Product B", quantity: 1, price: 20 },
    ];
    setSalesToday(mockSalesData);
  }, []);

  if (!showSalesPage) {
    return (
      <div className="container min-h-screen p-8 pb-20 font-[family-name:var(--font-geist-sans)] flex_center max-sm:flex-col gap-5">
        <p>Do you wish to input a sale?</p>
        <div className="flex_center gap-4 max-sm:mt-4">

          <button className="gen_button" onClick={() => router.push('/salesentry')}>Yes</button>
          <button className="gen_button" onClick={() => handlePromptResponse("no")}>No</button>
        </div>
      </div>
    );
  }

  return (
    <section className="container min-h-screen p-8 pb-20 font-[family-name:var(--font-geist-sans)]">
      <h1>Inventory</h1>
      <div className="flex justify-center items-center mt-4">
        <h2>Sales Made Today</h2>
        
      </div>
    </section>
  );
};

export default Page;



//sales former